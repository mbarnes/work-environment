#!/bin/bash

XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

source "$XDG_DATA_HOME/work-environment/functions.sh"

if [[ -n $1 ]]
then
  export CLUSTERID=$1
fi

if [[ -z "$CLUSTERID" ]]
then
  echo "Usage: source cluster <clusterid>" > /dev/stderr
else
  # Unset any previous cluster variables.
  unset KUBECONFIG
  unset ARO_LOCATION
  unset ARO_RESOURCE_GROUP
  unset AWS_PROFILE
  unset AWS_DEFAULT_REGION
  unset OCM_CONFIG
  unset OCM_CLUSTERID

  if [[ "$CLUSTERID" == "none" ]]
  then
    # Special name to reset the environment.
    unset CLUSTERID
  else
    CACHE_FILE=$(cluster_cache_file_exact $CLUSTERID)
    if [[ -f $CACHE_FILE ]]
    then
      CLUSTERID=$(cluster_from_cache_file $CACHE_FILE)
      case $CLUSTERID in
        v3:*)
          VERSION=v3
          CLUSTERID=${CLUSTERID:3}  # Trim off v3:
          export AWS_PROFILE=$(get-cluster-var $CLUSTERID oo_account)
          export AWS_DEFAULT_REGION=$(get-cluster-var $CLUSTERID oo_sublocation)
          cluster-context
          ;;
        aro:*)
          VERSION=aro
          CLUSTERID=${CLUSTERID:4}  # Trim off aro:
          export KUBECONFIG="${CACHE_FILE/$XDG_CACHE_HOME/$XDG_CONFIG_HOME}"
          ARO_CONFIG_DIR=$(dirname $(dirname $KUBECONFIG))
          mkdir -p "ARO_CONFIG_DIR/clusters"
          export ARO_LOCATION=$(get-cluster-var $CLUSTERID location)
          export ARO_RESOURCE_GROUP=$(get-cluster-var $CLUSTERID resourceGroup)
          cluster-context
          if [[ ! -e $KUBECONFIG ]]
          then
            touch $KUBECONFIG
          fi
          echo
          if oc whoami >& /dev/null
          then
            echo "You are logged in as \"$(oc whoami)\""
          else
            CREDS=$(az aro list-credentials --name $CLUSTERID --resource-group $ARO_RESOURCE_GROUP)
            oc login $(get-cluster-var $CLUSTERID apiserverProfile.url) \
              --username $(jq --raw-output .kubeadminUsername <<<"$CREDS") \
              --password $(jq --raw-output .kubeadminPassword <<<"$CREDS")
          fi
          ;;
        ocm:*)
          VERSION=ocm
          CLUSTERID=${CLUSTERID:4}  # Trim off ocm:
          export KUBECONFIG="${CACHE_FILE/$XDG_CACHE_HOME/$XDG_CONFIG_HOME}"
          OCM_CONFIG_DIR=$(dirname $(dirname $KUBECONFIG))
          mkdir -p "$OCM_CONFIG_DIR/clusters"
          export OCM_CONFIG="$OCM_CONFIG_DIR/config"
          export OCM_CLUSTERID=$(get-cluster-var $CLUSTERID id)
          export AWS_DEFAULT_REGION=$(get-cluster-var $CLUSTERID region.id)
          if [[ ! -e $KUBECONFIG ]]
          then
            case $(basename $OCM_CONFIG_DIR) in
              integration|staging)
                # Requires ocm role SREPDeveloper
                ocm get /api/clusters_mgmt/v1/clusters/$OCM_CLUSTERID/credentials | jq -r .kubeconfig > $KUBECONFIG
                ;;
              production)
                touch $KUBECONFIG
                ;;
            esac
          fi
          cluster-context
          ;;
        *)
          echo "Panic! Unrecognized cache file $CACHE_FILE" > /dev/stderr
          ;;
      esac
    fi
  fi
fi

TMUX_CLUSTER_FILE=$(tmux-cluster-file)
if [[ -n "$TMUX_CLUSTER_FILE" ]]
then
  if [[ -n "$VERSION" ]] && [[ -n "$CLUSTERID" ]]
  then
    if [[ -d $(dirname $TMUX_CLUSTER_FILE) ]]
    then
        echo "export CLUSTERID=$CLUSTERID" > $TMUX_CLUSTER_FILE
        echo "export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $TMUX_CLUSTER_FILE
        if [[ -n "$AWS_PROFILE" ]]
        then
            echo "export AWS_PROFILE=$AWS_PROFILE" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$KUBECONFIG" ]]
        then
            echo "export KUBECONFIG=$KUBECONFIG" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$ARO_LOCATION" ]]
        then
            echo "export ARO_LOCATION=$ARO_LOCATION" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$ARO_RESOURCE_GROUP" ]]
        then
            echo "export ARO_RESOURCE_GROUP=$ARO_RESOURCE_GROUP" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$OCM_CLUSTERID" ]]
        then
            echo "export OCM_CLUSTERID=$OCM_CLUSTERID" >> $TMUX_CLUSTER_FILE
        fi
        if [[ -n "$OCM_CONFIG" ]]
        then
            echo "export OCM_CONFIG=$OCM_CONFIG" >> $TMUX_CLUSTER_FILE
        fi
    fi
    tmux rename-window "$VERSION:$CLUSTERID"
  else
    rm --force $TMUX_CLUSTER_FILE
    tmux rename-window ""
  fi
fi

unset VERSION
