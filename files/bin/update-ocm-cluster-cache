#!/usr/bin/python

import argparse
import errno
import json
import os
import shutil
import subprocess
import sys
import tempfile

try:
    from shutil import which
except ImportError:
    # Simplified shutil.which from Python 3
    def which(cmd):
        # Check that a given file can be accessed with the correct mode.
        def _access_check(fn):
            mode = os.F_OK | os.X_OK
            return os.path.exists(fn) and os.access(fn, mode)

        # If we're given a path with a directory part, look it up directly rather
        # then referring to PATH directories. This includes checking relative to the
        # current directory, e.g. ./script
        if os.path.dirname(cmd):
            if _access_check(cmd):
                return cmd
            return None

        path = os.environ.get("PATH", os.defpath).split(os.pathsep)
        files = [cmd]

        seen = set()
        for dir in path:
            normdir = os.path.normcase(dir)
            if not normdir in seen:
                seen.add(normdir)
                for thefile in files:
                    name = os.path.join(dir, thefile)
                    if _access_check(name):
                        return name
        return None


HOME = os.path.expandvars('$HOME')
XDG_CACHE_HOME_DEFAULT = os.path.join(HOME, '.cache')
XDG_CACHE_HOME = os.environ.get('XDG_CACHE_HOME', XDG_CACHE_HOME_DEFAULT)
XDG_CONFIG_HOME_DEFAULT = os.path.join(HOME, '.config')
XDG_CONFIG_HOME = os.environ.get('XDG_CONFIG_HOME', XDG_CONFIG_HOME_DEFAULT)

OCM_CACHE_DIR = os.path.join(XDG_CACHE_HOME, 'ocm')
OCM_CONFIG_DIR = os.path.join(XDG_CONFIG_HOME, 'ocm')
CLUSTERS_API_PATH = '/api/clusters_mgmt/v1/clusters'
OCM_COMMAND_DEFAULT = which('ocm')

def safe_mkdir(path, mode=0777):
    try:
        os.makedirs(path, mode)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_managed_clusters(ocm_command, ocm_config_file):
    page=1
    items=[]

    # Update total after we get the first result.
    # This just ensures we make at least one pass.
    total=sys.maxsize

    while len(items) < total:
        try:
            ocm_output = subprocess.check_output([
                ocm_command, 'get', CLUSTERS_API_PATH,
                '--parameter=search=managed=\'true\'',
                '--parameter=page=%d' % page],
                env={'OCM_CONFIG': ocm_config_file},
                stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as ex:
            display_command="OCM_CONFIG={} {}".format(ocm_config_file, ocm_command)
            sys.stderr.write(
                "{}: Command \"{}\" returned non-zero exit status {}\n".format(
                os.path.basename(sys.argv[0]), display_command, ex.returncode))
            sys.stderr.write(ex.output)
            del items[:]
            break
        json_result = json.loads(ocm_output)
        total = json_result['total']
        items.extend(json_result['items'])
        page += 1

    # OCM clusters are identified by an alphanumeric ID and can
    # have identical names.  Disambiguate such cases by tacking
    # on the router shard from the base domain.
    clusters_by_name = {}
    managed_clusters = {}
    for cluster in items:
        clusters_by_name.setdefault(cluster['name'], []).append(cluster)
    for cluster_name, cluster_list in clusters_by_name.items():
        if len(cluster_list) == 1:
            managed_clusters[cluster_name] = cluster_list[0]
        else:
            for cluster in cluster_list:
                router_shard = cluster['dns']['base_domain'].split('.')[0]
                cluster_name_shard = cluster_name + '.' + router_shard
                managed_clusters[cluster_name_shard] = cluster

    return managed_clusters


def main(args):
    ocm_base_cache_dir = os.path.expanduser(OCM_CACHE_DIR)
    ocm_base_config_dir = os.path.expanduser(OCM_CONFIG_DIR)

    for ocm_environment in ('production', 'staging', 'integration'):
        ocm_cache_dir = os.path.join(ocm_base_cache_dir, ocm_environment)
        ocm_config_dir = os.path.join(ocm_base_config_dir, ocm_environment)

        ocm_clusters_cache_dir = os.path.join(ocm_cache_dir, 'clusters')
        ocm_clusters_config_dir = os.path.join(ocm_config_dir, 'clusters')

        ocm_config_file = os.path.join(ocm_config_dir, 'config')
        managed_clusters = get_managed_clusters(args.ocm_command, ocm_config_file)

        # Replace the cache directory
        safe_mkdir(ocm_cache_dir)
        tempdir = tempfile.mkdtemp(dir=ocm_cache_dir)
        os.chdir(tempdir)  # for relative symlinks
        for cluster_name, cluster_data in managed_clusters.items():
            filename = os.path.join(tempdir, cluster_name)
            with open(filename, 'w') as cache_file:
                content = json.dumps(cluster_data, indent=2)
                cache_file.write(content + '\n')
            if 'external_id' in cluster_data:
                os.symlink(cluster_name, cluster_data['external_id'])
        if os.path.isdir(ocm_clusters_cache_dir):
            shutil.rmtree(ocm_clusters_cache_dir, ignore_errors=True)
        os.rename(tempdir, ocm_clusters_cache_dir)

        # Clean up the config directory
        safe_mkdir(ocm_clusters_config_dir)
        for dirpath, dirnames, filenames in os.walk(ocm_clusters_config_dir):
            for cluster_name in filenames:
                if cluster_name not in managed_clusters:
                    os.unlink(os.path.join(dirpath, cluster_name))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--ocm-command', metavar='PATH',
        default=OCM_COMMAND_DEFAULT,
        help='path to "ocm" command (default: {})'.format(OCM_COMMAND_DEFAULT))
    args = parser.parse_args()

    main(args)
